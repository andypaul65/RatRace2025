/* tslint:disable */
/* eslint-disable */
/**
 * RatRace2025 MVP Subproject API
 * API contracts for RatRace2025 financial modeling subproject within MVP framework
 *
 * The version of the OpenAPI document: 0.0.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    'primaryCategory': EntityPrimaryCategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof Entity
     */
    'balance'?: number;
    /**
     * 
     * @type {number}
     * @memberof Entity
     */
    'rate'?: number;
}

export const EntityPrimaryCategoryEnum = {
    Asset: 'Asset',
    Liability: 'Liability',
    Income: 'Income',
    Expense: 'Expense'
} as const;

export type EntityPrimaryCategoryEnum = typeof EntityPrimaryCategoryEnum[keyof typeof EntityPrimaryCategoryEnum];

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'type'?: string;
    /**
     * Error message description
     * @type {string}
     * @memberof ErrorResponse
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'namespace'?: string;
}
/**
 * 
 * @export
 * @interface MessageDto
 */
export interface MessageDto {
    /**
     * Message type identifier
     * @type {string}
     * @memberof MessageDto
     */
    'type': string;
    /**
     * Message payload content
     * @type {string}
     * @memberof MessageDto
     */
    'content': string;
    /**
     * MVP namespace for message isolation
     * @type {string}
     * @memberof MessageDto
     */
    'namespace': string;
}
/**
 * Sankey diagram data for flow visualization
 * @export
 * @interface SankeyData
 */
export interface SankeyData {
    /**
     * 
     * @type {Array<SankeyDataNodesInner>}
     * @memberof SankeyData
     */
    'nodes'?: Array<SankeyDataNodesInner>;
    /**
     * 
     * @type {Array<SankeyDataLinksInner>}
     * @memberof SankeyData
     */
    'links'?: Array<SankeyDataLinksInner>;
}
/**
 * 
 * @export
 * @interface SankeyDataLinksInner
 */
export interface SankeyDataLinksInner {
    /**
     * 
     * @type {string}
     * @memberof SankeyDataLinksInner
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof SankeyDataLinksInner
     */
    'target'?: string;
    /**
     * 
     * @type {number}
     * @memberof SankeyDataLinksInner
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface SankeyDataNodesInner
 */
export interface SankeyDataNodesInner {
    /**
     * 
     * @type {string}
     * @memberof SankeyDataNodesInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SankeyDataNodesInner
     */
    'name'?: string;
}
/**
 * Financial scenario configuration data
 * @export
 * @interface ScenarioData
 */
export interface ScenarioData {
    /**
     * 
     * @type {Array<Entity>}
     * @memberof ScenarioData
     */
    'entities'?: Array<Entity>;
    /**
     * 
     * @type {Timeline}
     * @memberof ScenarioData
     */
    'timeline'?: Timeline;
}
/**
 * 
 * @export
 * @interface TimePeriod
 */
export interface TimePeriod {
    /**
     * 
     * @type {string}
     * @memberof TimePeriod
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof TimePeriod
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof TimePeriod
     */
    'riskFreeRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimePeriod
     */
    'inflationRate'?: number;
}
/**
 * 
 * @export
 * @interface Timeline
 */
export interface Timeline {
    /**
     * 
     * @type {string}
     * @memberof Timeline
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Timeline
     */
    'endDate'?: string;
    /**
     * 
     * @type {Array<TimePeriod>}
     * @memberof Timeline
     */
    'periods'?: Array<TimePeriod>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Send messages to the RatRace financial modeling service via MVP backplane
         * @summary Send message to RatRace system state service
         * @param {MessageDto} messageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mvpMessagesPost: async (messageDto: MessageDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageDto' is not null or undefined
            assertParamExists('mvpMessagesPost', 'messageDto', messageDto)
            const localVarPath = `/mvp/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Send messages to the RatRace financial modeling service via MVP backplane
         * @summary Send message to RatRace system state service
         * @param {MessageDto} messageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mvpMessagesPost(messageDto: MessageDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mvpMessagesPost(messageDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.mvpMessagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Send messages to the RatRace financial modeling service via MVP backplane
         * @summary Send message to RatRace system state service
         * @param {MessageDto} messageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mvpMessagesPost(messageDto: MessageDto, options?: any): AxiosPromise<MessageDto> {
            return localVarFp.mvpMessagesPost(messageDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Send messages to the RatRace financial modeling service via MVP backplane
     * @summary Send message to RatRace system state service
     * @param {MessageDto} messageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mvpMessagesPost(messageDto: MessageDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).mvpMessagesPost(messageDto, options).then((request) => request(this.axios, this.basePath));
    }
}



